---
import Welcome from "../../components/Welcome.astro";
import Layout from "../../layouts/Layout.astro";
import Technology from "../../components/Technology.astro";
import Education from "../../components/Education.astro";
import Skills from "../../components/Skills.astro";

export async function getStaticPaths() {
  return [
    {
      params: { lang: "es" },
      props: { language: "es" },
    },
    {
      params: { lang: "en" },
      props: { language: "en" },
    },
  ];
}

const { language } = Astro.props;

/* ESCALA DE COLORES DESDE EL MAS OSCURO HASTA ELMAS clearTimeout
#101828
#1e2939
#334155
#262f3d (footer)
*/

// Welcome to Astro! Wondering what to do next? Check out the Astro documentation at https://docs.astro.build
// Don't want to use any of this? Delete everything in this file, the `assets`, `components`, and `layouts` directories, and start fresh.
---

<Layout
  title="Ivan Rodriguez Rojas FrontEnd Developer"
  defaultLanguage={language}
>
  <!-- bg-gray-200 dark:bg-[#1e2939] -->
  <div class="grid grid-cols-1 left-0 w-full min-h-screen">
    <div class="flex items-center justify-center">
      <Technology defaultLanguage={language} />
    </div>

    <div class="flex items-center justify-center">
      <Skills defaultLanguage={language} />
    </div>
    <div id="educationSection" class="flex items-center justify-center">
      <Education defaultLanguage={language} />
    </div>
  </div>
</Layout>

<script is:inline>
  function initialize() {
    const defLang = localStorage.getItem("language") || "es";

    // Si ya estamos en la URL correcta, no redirigir
    if (!window.location.pathname.startsWith(`/${defLang}`)) {
      window.location.href = `/${defLang}`;
    }

    /*############# PARA EL SWITCHER DE TEMA #############*/
    const iconsToggle = {
      moon: `<svg xmlns="http://www.w3.org/2000/svg" width="18px" height="18px" viewBox="0 0 36 36"><circle cx="18" cy="18" r="18" fill="#66757f"/><g fill="#5b6876"><circle cx="10.5" cy="8.5" r="3.5"/><circle cx="20" cy="16" r="3"/><circle cx="21.5" cy="27.5" r="3.5"/><circle cx="21" cy="6" r="2"/><circle cx="3" cy="18" r="1"/><circle cx="30" cy="9" r="1"/><circle cx="15" cy="31" r="1"/><circle cx="32" cy="19" r="2"/><circle cx="10" cy="23" r="2"/></g></svg>`,
      sun: `<svg xmlns="http://www.w3.org/2000/svg" width="18px" height="18px" viewBox="0 0 512 512"><path fill="#ffc639" d="m260.622 42.537l58.117-39.696c3.641-2.487 8.643-1.147 10.552 2.828l30.483 63.437a7.2 7.2 0 0 0 7.035 4.062l70.179-5.32c4.397-.333 8.058 3.328 7.725 7.725l-5.32 70.179a7.2 7.2 0 0 0 4.062 7.035l63.437 30.483c3.975 1.91 5.315 6.911 2.828 10.552l-39.696 58.117a7.2 7.2 0 0 0 0 8.123l39.696 58.117c2.487 3.641 1.147 8.643-2.828 10.552l-63.437 30.483a7.2 7.2 0 0 0-4.062 7.035l5.32 70.179c.333 4.397-3.328 8.058-7.725 7.725l-70.179-5.32a7.2 7.2 0 0 0-7.035 4.062l-30.483 63.437c-1.91 3.975-6.911 5.315-10.552 2.828l-58.117-39.696a7.2 7.2 0 0 0-8.123 0l-58.117 39.696c-3.641 2.487-8.643 1.147-10.552-2.828l-30.483-63.437a7.2 7.2 0 0 0-7.035-4.062l-70.179 5.32c-4.397.333-8.058-3.328-7.725-7.725l5.32-70.179a7.2 7.2 0 0 0-4.062-7.035L6.228 328.731c-3.975-1.91-5.315-6.911-2.828-10.552l39.696-58.117a7.2 7.2 0 0 0 0-8.123L3.401 193.821c-2.487-3.641-1.147-8.643 2.828-10.552l63.437-30.483a7.2 7.2 0 0 0 4.062-7.035l-5.32-70.179c-.333-4.397 3.328-8.058 7.725-7.725l70.179 5.32a7.2 7.2 0 0 0 7.035-4.062L183.83 5.668c1.91-3.975 6.911-5.315 10.552-2.828l58.117 39.696a7.2 7.2 0 0 0 8.123.001"/><circle cx="256.56" cy="256" r="194.415" fill="#ffe564"/></svg>`,
    };
    const checkbox = document.getElementById("toggleTheme");
    const icon = document.getElementById("iconToggle");

    if (checkbox && icon) {
      icon.innerHTML = iconsToggle.moon;
      if (checkbox instanceof HTMLInputElement) {
        const doc = document.documentElement;
        checkbox.addEventListener("change", () => {
          if (typeof iconsToggle === "undefined") {
            console.error("La variable iconsToggle no está definida.");
            return;
          }
          if (icon) {
            if (checkbox.checked) {
              icon.innerHTML = iconsToggle.sun;
              localStorage.setItem("theme", "light");
              doc.classList.toggle("light", checkbox.checked);
            } else {
              icon.innerHTML = iconsToggle.moon;
              localStorage.setItem("theme", "dark");
              doc.classList.toggle("dark", !checkbox.checked);
            }
          }

          doc.classList.toggle("dark", !checkbox.checked);
        });
      } else {
        console.error(
          "El elemento con id 'toggleTheme' no es un input válido."
        );
      }
    }
    /*############# PARA EL SWITCHER DE TEMA #############*/

    /*############# PARA EL RANKING DE LOS SKILLS #############*/
    function loadLevelsSkills() {
      let levelSkill = document.querySelectorAll(".levelSkill");
      let barLevelSkill = document.querySelectorAll(".barLevelSkill");

      barLevelSkill.forEach((el) => {
        let barLevelSkill = el.dataset.bar;
        let index = 0;
        let interval = null;
        interval = setInterval(() => {
          if (index >= barLevelSkill) {
            clearInterval(interval);
          } else {
            index++;
            el.setAttribute("style", `width: ${index}%`);
          }
        }, 10);
      });

      levelSkill.forEach((el) => {
        let levelSkillValue = el.dataset.level;
        let index = 0;
        let interval = null;
        interval = setInterval(() => {
          if (index >= levelSkillValue) {
            clearInterval(interval);
          } else {
            index++;
            el.innerHTML = `${index}`;
          }
        }, 100);
      });
    }

    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          loadLevelsSkills();
          observer.unobserve(entry.target);
        }
      });
    });
    const target = document.getElementById("skills");
    if (target) {
      observer.observe(target);
    }
    /*############# PARA EL RANKING DE LOS SKILLS #############*/

    /*############# PARA EL SWITCHER DE LENGUAJES #############*/

    let changeLanguage = (lang) => {
      localStorage.setItem("language", lang);
      console.log(localStorage.getItem("language") + `*`);
      window.location.href = `/${lang}`;
    };
    document
      .getElementById("language-icon-es")
      ?.addEventListener("click", (e) => {
        changeLanguage(e.currentTarget.getAttribute("data-language"));
      });
    document
      .getElementById("language-icon-en")
      ?.addEventListener("click", (e) => {
        changeLanguage(e.currentTarget.getAttribute("data-language"));
      });

    const toggleMenu = (e) => {
      const iconSwitch = document.querySelector("#icon-switch-language");
      const menu = document.querySelector("#language-menu");

      // ASEGÚRATE DE QUE ESTÁS MANEJANDO EL EVENTO PARA EL ELEMENTO CORRECTO
      if (iconSwitch?.contains(e.target)) {
        menu?.classList.toggle("lg:hidden");
      } // Si se hace click fuera del menú o del botón, ocultar el menú
      else if (!menu?.contains(e.target)) {
        menu?.classList.add("lg:hidden");
      }
    };

    document.addEventListener("click", toggleMenu);
    /*############# PARA EL SWITCHER DE LENGUAJES #############*/

    /*############# PARA LOS BOTONES DE MOSTRAR Y CERRAR EL MENU EN DISP SM #############*/
    const toggleButton = document.getElementById("navbar-toggle");
    const navbarClose = document.getElementById("navbar-close");
    const nav = document.getElementById("navbar");
    const menuContent = document.getElementById("menu-content");
    const menuContentHeader = document.getElementById("menu-content-header");
    toggleButton?.addEventListener("click", () => {
      const isHidden = nav?.classList.contains("w-0");
      if (isHidden) {
        nav?.classList.remove("w-0");
        nav?.classList.add("w-60");
      } else {
        nav?.classList.remove("w-60");
        nav?.classList.add("w-0");
      }

      const isHidden2 = menuContent?.classList.contains("w-0");
      if (isHidden2) {
        menuContent?.classList.remove("w-0");
        menuContent?.classList.add("w-60");
        menuContent?.classList.toggle("p-2", isHidden2);
        menuContent?.classList.toggle("p-4", isHidden2);

        menuContentHeader?.classList.remove("w-0");
        menuContentHeader?.classList.add("w-full");
      } else {
        menuContent?.classList.remove("w-60");
        menuContent?.classList.add("w-0");

        menuContentHeader?.classList.remove("w-full");
        menuContentHeader?.classList.add("w-0");
      }
    });

    navbarClose.addEventListener("click", () => {
      const isHidden2 = menuContent?.classList.contains("w-0");
      menuContent?.classList.toggle("p-2", isHidden2);
      menuContent?.classList.toggle("p-4", isHidden2);

      nav?.classList.remove("w-60");
      nav?.classList.add("w-0");

      menuContent?.classList.remove("w-60");
      menuContent?.classList.add("w-0");

      menuContentHeader?.classList.remove("w-full");
      /* menuContentHeader?.classList.add("w-0"); */
    });
    /*############# PARA LOS BOTONES DE MOSTRAR Y CERRAR EL MENU EN DISP SM #############*/
  }

  function loadTheme() {
    const defTheme = localStorage.getItem("theme") || "dark";
    const doc = document.documentElement;
    doc.classList.toggle("dark", defTheme === "dark");
    defTheme === "light"
      ? (document.getElementById("toggleTheme").checked = true)
      : (document.getElementById("toggleTheme").checked = false);
  }
  loadTheme();
  document.addEventListener("DOMContentLoaded", () => {
    initialize();
  });

  // Escuchar cambios de ruta para volver a ejecutar la función de inicialización
  window.addEventListener("popstate", () => {
    initialize();
  });

  // Escuchar cambios de hash para volver a ejecutar la función de inicialización
  window.addEventListener("hashchange", () => {
    initialize();
  });

  // Escuchar cambios de navegación para volver a ejecutar la función de inicialización
  document.addEventListener("astro:after-swap", () => {
    loadTheme();
    initialize();
  });
</script>
