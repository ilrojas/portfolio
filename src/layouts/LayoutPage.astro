---
import { ClientRouter } from "astro:transitions";
import Sidebar from "../components/Sidebar.astro";
import Welcome from "../components/Welcome.astro";
import Technology from "../components/Technology.astro";
import { iconCoder } from "../data/iconCoder";
import Footer from "../components/Footer.astro";
import SectionTech from "../components/SectionTech.astro";
import NavBar from "../components/NavBar.astro";
import { dictionary } from "../data/dictionary";
import Badge from "../components/Badge.astro";
import { effect } from "astro:schema";

/* import { onBeforeRender } from 'astro';

export const prerender = true;

export async function getStaticPaths() {
  return [
    { params: { lang: 'es' } },
    { params: { lang: 'en' } },
  ];
}

export async function get({ params }) {
  const lang = params.lang || defaultLang;
  return {
    props: {
      language: lang,
    },
  };
} */

const { title, defaultLanguage } = Astro.props;

const url = new URL(Astro.request.url); // Obtener la URL desde la solicitud.
const path = url.pathname;

const separatedPath = path
  .split("/")
  .filter((el) => el !== "") // Eliminar elementos vacíos
  .reduce((acc, el) => {
    acc[el] = dictionary[defaultLanguage][el] || el; // Agregar traducción o valor original
    return acc;
  }, {});
---

<!doctype html>
<html lang="en" class="dark">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link
      href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css"
      rel="stylesheet"
    />

    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <!-- Font Jost -->
    <link
      href="https://fonts.googleapis.com/css2?family=Jost:ital,wght@0,100..900;1,100..900&display=swap"
      rel="stylesheet"
    />

    <!-- Font Rubik -->
    <link
      href="https://fonts.googleapis.com/css2?family=Rubik+Vinyl&display=swap"
      rel="stylesheet"
    />

    <!-- Font Inter -->
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap"
      rel="stylesheet"
    />
    <!-- Font Inter Tight -->
    <link
      href="https://fonts.googleapis.com/css2?family=Inter+Tight:ital,wght@0,100..900;1,100..900&display=swap"
      rel="stylesheet"
    />

    <title>{title}</title>

    <ClientRouter />
  </head>
  <!-- bg-customBackground bg-repeat bg-cover -->
  <body
    class="h-full grid grid-cols-1 text-black/70 dark:text-white bg-white font-inter box-content"
  >
    <!-- <div
      class="bg-gradient-to-tl from-[#26195c] via-[#284b92] to-[#26195c] dark:hidden"
    >
      <slot />
    </div> -->
    <div class="bg-white dark:bg-[#101828]">
      <div
        class="h-[120px] lg:h-[175px] z-[1] items-start flex flex-col columns-2 space-x-20 pt-6 lg:pt-10 lg:flex-row md:flex-col md:items-center w-full relative lg:static"
      >
        <div
          class="flex justify-center items-center gap-3 pl-20 lg:pl-24 h-fit-content"
        >
          <div
            class="lg:text-sm lg:py-1 lg:px-4
                  flex flex-row justify-between"
            set:html={iconCoder}
          />
          <div class="">
            <h1
              class="text-2xl lg:text-4xl uppercase font-extrabold text-balance"
              transition:name="labelAboutx"
            >
              {title}
            </h1>
          </div>
        </div>
        <div
          class="right-8 h-[80%] lg:mt-10 -z-10 lg:z-auto opacity-5 lg:opacity-100 absolute lg:static"
        >
          dd
        </div>
      </div>
      <div>
        <section class="grid-cols-12 gap-4 pr-10 pt-3 pb-2 grid">
          <div class="col-span-1"></div>
          <div class="col-span-11">
            <div class="flex align-middle justify-start">
              {
                Object.entries(separatedPath).map(
                  ([key, value], index, array) => {
                    const href = `/${array
                      .slice(0, index + 1)
                      .map(([k]) => k)
                      .join("/")}`;
                    return (
                      <a
                        href={href}
                        key={key}
                        class={`flex text-xs ${index == array.length - 1 ? "font-bold" : "font-thin"}`}
                      >
                        {value === "es" || value === "en"
                          ? dictionary[value].home
                          : value}
                        {index < array.length - 1 && (
                          <span class="mx-2">{`/`}</span>
                        )}
                      </a>
                    );
                  }
                )
              }
            </div>
          </div>
        </section>
      </div>
      <span class="hidden" id="lang" data-lang={defaultLanguage}></span>

      <!-- <div class=""><Sidebar defaultLanguage={language} /></div> -->

      <div
        class="grid grid-cols-1 left-0 w-full bg-gray-200 dark:bg-[#1e2939] min-h-screen"
      >
        <main class="px-10">
          <slot />
        </main>
        <Footer defaultLanguage={defaultLanguage} />
      </div>
    </div>
  </body>
</html>
<style is:global>
  :root {
    --var-dark-bg: #0b3c67;
    --var-light-bg: #f3f4f6;
    --var-dark-text: #f3f4f6;
    --var-light-text: #111827;
    --var-progress-tech-skill-light: #94a3b8;
    --var-progress-tech-skill-dark: #164e63;
  }
</style>
<script is:inline>
  /* Para el modal del CV */
  /* const dialog = document.getElementById("cvdialog");
  const butoncv = document.getElementById("butoncv");
  butoncv?.addEventListener("click", (e) => {
    if (e.target === dialog) {
      dialog.showModal();
    }
  }); */

  /* peer-hover:block focus-within:block */
</script>
