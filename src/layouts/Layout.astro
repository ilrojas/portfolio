---
import { ClientRouter } from "astro:transitions";
import Sidebar from "../components/Sidebar.astro";
import Welcome from "../components/Welcome.astro";
import Technology from "../components/Technology.astro";

import Footer from "../components/Footer.astro";
import SectionTech from "../components/SectionTech.astro";
import NavBar from "../components/NavBar.astro";
import { dictionary } from "../data/dictionary";
import Badge from "../components/Badge.astro";
import { effect } from "astro:schema";


/* import { onBeforeRender } from 'astro';

export const prerender = true;

export async function getStaticPaths() {
  return [
    { params: { lang: 'es' } },
    { params: { lang: 'en' } },
  ];
}

export async function get({ params }) {
  const lang = params.lang || defaultLang;
  return {
    props: {
      language: lang,
    },
  };
} */

const { title, defaultLanguage } = Astro.props;

const url = new URL(Astro.request.url); // Obtener la URL desde la solicitud.
const path = url.pathname;

const separatedPath = path
  .split('/')
  .filter(el => el !== '') // Eliminar elementos vacíos
  .reduce((acc, el) => {
    acc[el] = dictionary[defaultLanguage][el] || el; // Agregar traducción o valor original
    return acc;
  }, {});
---

<!doctype html>
<html lang="en" class="dark">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link
      href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css"
      rel="stylesheet"
    />

    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <!-- Font Jost -->
    <link
      href="https://fonts.googleapis.com/css2?family=Jost:ital,wght@0,100..900;1,100..900&display=swap"
      rel="stylesheet"
    />

    <!-- Font Rubik -->
    <link
      href="https://fonts.googleapis.com/css2?family=Rubik+Vinyl&display=swap"
      rel="stylesheet"
    />

    <!-- Font Inter -->
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap"
      rel="stylesheet"
    />
    <!-- Font Inter Tight -->
    <link
      href="https://fonts.googleapis.com/css2?family=Inter+Tight:ital,wght@0,100..900;1,100..900&display=swap"
      rel="stylesheet"
    />
    
    <title>{title}</title>

    <ClientRouter />
  </head>
  <!-- bg-customBackground bg-repeat bg-cover -->
  <body
    class="h-full grid grid-cols-1 text-black/70 dark:text-white bg-white font-inter box-content"
  >
    <!-- <div
      class="bg-gradient-to-tl from-[#26195c] via-[#284b92] to-[#26195c] dark:hidden"
    >
      <slot />
    </div> -->
    <div class="bg-white dark:bg-[#101828]">
      <NavBar defaultLanguage={defaultLanguage} />
      <SectionTech defaultLanguage={defaultLanguage} />
      <!-- <Wave /> -->
      <span class="hidden" id="lang" data-lang={defaultLanguage}></span>

      <!-- <div class=""><Sidebar defaultLanguage={language} /></div> -->

      <div
        class="grid grid-cols-1 left-0 w-full bg-gray-200 dark:bg-[#1e2939] min-h-screen"
      >
        <main class="">
          <section class="grid-cols-12 gap-4 pr-10 pt-3 pb-5 lg:pb-5 hidden md:grid lg:grid">
            <div class="col-span-2"></div>
            <div class="col-span-10 bg-gray-700/30 w-full rounded-xl py-1 pl-4">
              <div class="flex align-middle justify-start">
                <!-- <Badge
              badgeText={dictionary[defaultLanguage]?.rhetoric}
              badgeIcon=`<svg xmlns="http://www.w3.org/2000/svg" class="animate-pulse" width="12" height="12" viewBox="0 0 12 24"><path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.684 3.603c.521-.659.03-1.603-.836-1.603h-6.716a1.06 1.06 0 0 0-.909.502l-5.082 8.456c-.401.666.103 1.497.908 1.497h3.429l-3.23 8.065c-.467 1.02.795 1.953 1.643 1.215L20 9.331h-6.849z"/></svg>`
              badgeColor=`green-400`
            />
            <Badge
              badgeText={dictionary[defaultLanguage]?.rhetoric}
              badgeIcon=`<svg xmlns="http://www.w3.org/2000/svg" class="animate-pulse" width="12" height="12" viewBox="0 0 12 24"><path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.684 3.603c.521-.659.03-1.603-.836-1.603h-6.716a1.06 1.06 0 0 0-.909.502l-5.082 8.456c-.401.666.103 1.497.908 1.497h3.429l-3.23 8.065c-.467 1.02.795 1.953 1.643 1.215L20 9.331h-6.849z"/></svg>`
              badgeColor=`green-400`
              animate= true
            /> -->
                {Object.entries(separatedPath).map(([key, value], index, array) => {
                const href = `/${array.slice(0, index + 1).map(([k]) => k).join('/')}`;
                return (
                  <a href={href} key={key} class={`flex text-xs ${(index == array.length - 1 ? 'font-bold' : 'font-thin')}`}>
                  {/* <Badge
                    badgeText={(value === 'es' || value === 'en') ? 'Home' : value}
                    badgeIcon=""
                    badgeColor={index == array.length - 1?`gray-700`:`transparent`}
                  /> */}
                  {(value === 'es' || value === 'en') ? dictionary[value].home : value}
                  {index < array.length - 1 && <span class="mx-2">{`/`}</span>}
                  </a>
                );
                })}
            
              </div>
            </div>
            
          </section>
          <slot />
        </main>
        <Footer defaultLanguage={defaultLanguage} />
      </div>
    </div>
  </body>
</html>
<style is:global>
  :root {
    --var-dark-bg: #0b3c67;
    --var-light-bg: #f3f4f6;
    --var-dark-text: #f3f4f6;
    --var-light-text: #111827;
    --var-progress-tech-skill-light: #94a3b8;
    --var-progress-tech-skill-dark: #164e63;
  }
</style>
<script is:inline>
  /* Para el modal del CV */
  /* const dialog = document.getElementById("cvdialog");
  const butoncv = document.getElementById("butoncv");
  butoncv?.addEventListener("click", (e) => {
    if (e.target === dialog) {
      dialog.showModal();
    }
  }); */
  
  /* Para el switcher de lenguajes */
  const toggleMenu = (e) => {
    const iconSwitch = document.querySelector("#icon-switch-language");
    const menu = document.querySelector("#language-menu");

    // Asegúrate de que estás manejando el evento para el elemento correcto
    if (iconSwitch?.contains(e.target)) {
      menu?.classList.toggle("lg:hidden");
    } // Si se hace clic fuera del menú o del botón, ocultar el menú
    else if (!menu?.contains(e.target)) {
      menu?.classList.add("lg:hidden");
    }
  };

  // Registrar el evento después de definir la función
  document.addEventListener("click", toggleMenu);

  /* Para el switcher de tema */
  import { iconsToggle } from "../data/iconsToggle";

  const checkbox = document.getElementById("toggleTheme");
  const icon = document.getElementById("iconToggle");
  const doc = document.documentElement;

  if (checkbox instanceof HTMLInputElement) {
    checkbox.addEventListener("change", () => {
      if (icon) {
        /* icon?.innerHTML = checkbox.checked ? `<!-- Ícono del Sol -->${iconsToggle.sun}`: `<!-- Ícono de la Luna -->${iconsToggle.moon}`; */
        icon!.innerHTML = checkbox.checked ? iconsToggle.sun : iconsToggle.moon;
      }

      checkbox.checked
        ? doc.classList.remove("dark")
        : doc.classList.add("dark");
      /* doc.classList.toggle("dark") */
    });
  }

  /* peer-hover:block focus-within:block */
</script>
