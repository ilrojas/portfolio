---

import { ClientRouter } from "astro:transitions";


/* import { onBeforeRender } from 'astro';

export const prerender = true;

export async function getStaticPaths() {
  return [
    { params: { lang: 'es' } },
    { params: { lang: 'en' } },
  ];
}

export async function get({ params }) {
  const lang = params.lang || defaultLang;
  return {
    props: {
      language: lang,
    },
  };
} */

const {title} = Astro.props
---

<!doctype html>
<html lang="en" class="dark">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link
      href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css"
      rel="stylesheet"
    />

    <!-- Font Jost -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Jost:ital,wght@0,100..900;1,100..900&display=swap"
      rel="stylesheet"
    />
    

    <!-- Font Rubik -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Rubik+Vinyl&display=swap" rel="stylesheet">
    
<title>{title}</title>
    
    <ClientRouter />
  </head>
  <!-- bg-customBackground bg-repeat bg-cover -->
  <body
    class="h-full grid grid-cols-1 text-black/70 dark:text-white bg-gray-300 dark:bg-gray-900 font-jost"
  >
    <slot />
  </body>
</html>
<style is:global>
  :root {
    --var-dark-bg: #0b3c67;
    --var-light-bg: #f3f4f6;
    --var-dark-text: #f3f4f6;
    --var-light-text: #111827;
  }
</style>
<script>
  /* Para el modal del CV */
  /* const dialog = document.getElementById("cvdialog");
  const butoncv = document.getElementById("butoncv");
  butoncv?.addEventListener("click", (e) => {
    if (e.target === dialog) {
      dialog.showModal();
    }
  }); */

  /* Para el switcher de lenguajes */
  const toggleMenu = (e) => {
    console.log(e.target);
    const iconSwitch = document.querySelector("#icon-switch-language");
    const menu = document.querySelector("#language-menu");

    // Asegúrate de que estás manejando el evento para el elemento correcto
    if (iconSwitch?.contains(e.target)) {
      menu?.classList.toggle("lg:hidden");
    } // Si se hace clic fuera del menú o del botón, ocultar el menú
    else if (!menu?.contains(e.target)) {
      menu?.classList.add("lg:hidden");
    }
  };

  // Registrar el evento después de definir la función
  document.addEventListener("click", toggleMenu);

  /* Para el switcher de tema */
  import { iconsToggle } from "../data/iconsToggle";

  const checkbox = document.getElementById("toggleTheme");
  const icon = document.getElementById("iconToggle");
  const doc = document.documentElement;

  if (checkbox instanceof HTMLInputElement) {
    checkbox.addEventListener("change", () => {
      if (icon) {
        /* icon?.innerHTML = checkbox.checked ? `<!-- Ícono del Sol -->${iconsToggle.sun}`: `<!-- Ícono de la Luna -->${iconsToggle.moon}`; */
        if (checkbox.checked) {
          icon!.innerHTML = `<!-- Ícono del Sol -->${iconsToggle.sun}`;
        } else {
          icon!.innerHTML = `<!-- Ícono de la Luna -->${iconsToggle.moon}`;
        }
      }

      checkbox.checked
        ? doc.classList.remove("dark")
        : doc.classList.add("dark");
    });

    
  }

  /* peer-hover:block focus-within:block */
</script>
